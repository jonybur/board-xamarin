{"Name":"Advanced Color Picker","Id":2021,"Alias":"advancedcolorpicker","Description":"# AdvancedColorPicker\r\n\r\n\u003ciframe src=\"https://appetize.io/embed/1uzmreu5wh2vzm79vpag1nwmqm?device=iphone5s\u0026scale=75\u0026autoplay=true\u0026orientation=portrait\u0026deviceColor=black\" \r\n        width=\"274px\" height=\"587px\" frameborder=\"0\" scrolling=\"no\"\r\n        style=\"float:right;margin-left:1em;\"\u003e\u0026nbsp;\u003c/iframe\u003e\r\n\r\nAn open source color picker component for Xamarin.iOS that is very easy to use.\r\n\r\n## Usage\r\n\r\nAdvancedColorPicker is very simple and easy to use. There are two helper methods \r\nthat allow for quickly presenting a color picker. \r\nThe first is `PresentAsync` that returns the selected color:\r\n\r\n    var color = await ColorPickerViewController.PresentAsync(\r\n        NavigationController, \r\n        \"Pick a color!\",\r\n        View.BackgroundColor);\r\n    \r\n    // use selected color\r\n        \r\nIn the case when async method aren\u0027t preferrable, there is the synchronous\r\n`Present` method that takes a callback:\r\n\r\n    ColorPickerViewController.Present(\r\n        NavigationController, \r\n        \"Pick a color!\",\r\n        View.BackgroundColor,\r\n        color =\u003e {\r\n            // use selected color\r\n        });\r\n\r\nIf there is need to embed the picker into another view, this can be done\r\nusing `ColorPickerView`:\r\n\r\n    var colorPicker = new ColorPickerView();\r\n    colorPicker.ColorPicked += (sender, e) =\u003e {\r\n        var color = e.SelectedColor;\r\n        \r\n        // use selected color\r\n    };\r\n\r\nCompatibility\r\n==============\r\nAdvancedColorPicker is tested on iOS 4.3+, 5.0+, 6.0+, both on iPhone and iPad.\r\n\r\nAll devices, screen sizes and orientations are supported because AdvancedColorPicker \r\ndoes not use images nor nib files, but custom drawing and dynamic views creation \r\nto display everything.\r\n","Version":"2.0","Summary":"An open source color picker component for Xamarin.iOS.","QuickStart":"# AdvancedColorPicker\r\n\r\nAn open source color picker component for Xamarin.iOS that is very easy to use.\r\n\r\n## Usage\r\n\r\nAdvancedColorPicker is very simple and easy to use. \r\nThere are three main ways to use AdvancedColorPicker: \r\n\r\n  1. `Present` \u0026 `PresentAsync`\r\n  2. `ColorPickerViewController`\r\n  3. `ColorPickerView`\r\n\r\n### Present \u0026 PresentAsync\r\n\r\nThere are two helper methods that allow for quickly presenting a color picker. \r\nThe first is `PresentAsync` that returns the selected color:\r\n\r\n    UIColor color = await ColorPickerViewController.PresentAsync(\r\n        NavigationController, \r\n        \"Pick a color!\",\r\n        View.BackgroundColor);\r\n\t\r\n\t// use selected color\r\n\t\t\r\nIn the case when async method aren\u0027t preferrable, there is the synchronous\r\n`Present` method that takes a callback:\r\n\r\n    ColorPickerViewController.Present(\r\n        NavigationController, \r\n        \"Pick a color!\",\r\n        View.BackgroundColor,\r\n\t\tcolor =\u003e {\r\n\t\t    // use selected color\r\n\t\t});\r\n\r\n### ColorPickerViewController\r\n\r\nThere is the `ColorPickerViewController`, which is a stand-alone controller that can be used\r\nto preesent a color picker to the user:\r\n\r\n    // create the picker\r\n    var picker = new ColorPickerViewController {\r\n        Title = \"Pick a color!\",\r\n        SelectedColor = View.BackgroundColor\r\n    };\r\n    \r\n    // events for colors as they are picked\r\n    picker.ColorPicked += (sender, e) =\u003e {\r\n        // use selected color\r\n        View.BackgroundColor = e.SelectedColor;\r\n    }\r\n    \r\n    // create the picker popup\r\n    var pickerNav = new UINavigationController(picker);\r\n    pickerNav.ModalPresentationStyle = UIModalPresentationStyle.FormSheet;\r\n    pickerNav.NavigationBar.Translucent = false;\r\n    var doneBtn = new UIBarButtonItem(UIBarButtonSystemItem.Done);\r\n    picker.NavigationItem.RightBarButtonItem = doneBtn;\r\n    doneBtn.Clicked += delegate {\r\n        // \"Done\" was clicked\r\n        \r\n        // use selected color\r\n        View.BackgroundColor = picker.SelectedColor;\r\n        \r\n        // hide the picker\r\n        NavigationController.DismissModalViewController(true);\r\n    };\r\n    \r\n    // show the picker\r\n    NavigationController.PresentModalViewController(pickerNav, true);\r\n\r\n### ColorPickerView\r\n\r\nIf there is need to embed the picker into another view, this can be done\r\nusing `ColorPickerView`:\r\n\r\n    var colorPicker = new ColorPickerView();\r\n    colorPicker.ColorPicked += (sender, e) =\u003e {\r\n        var color = e.SelectedColor;\r\n        \r\n        // use selected color\r\n    };\r\n\r\n## Getting Colors\r\n\r\nBoth `ColorPickerView` and `ColorPickerViewContoller` have the `SelectedColor` event \r\nthat can be used to detect when the selected color changes. \r\nThere will be multiple events as the user drags a finger on the screen:\r\n\r\n    var colorPicker = new ColorPickerView();\r\n    colorPicker.ColorPicked += (sender, e) =\u003e {\r\n        var color = e.SelectedColor;\r\n        \r\n        // use selected color\r\n    };\r\n\r\nTo get the last color that was selected, we can use the `SelectedColor` property:\r\n\r\n    var colorPicker = new ColorPickerView();\r\n    // ...\r\n    var color = colorPicker.SelectedColor;\r\n","Hash":"37f64d5ce493f29eeb40aa9cd0f38964","TargetPlatforms":["ios"],"TrialHash":null}